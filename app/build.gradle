plugins {
    id 'com.android.application'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.google.android.gms:play-services-location:21.3.0"
    implementation "androidx.appcompat:appcompat:1.7.0"
    implementation 'androidx.preference:preference:1.2.1'
    implementation "com.google.android.material:material:1.12.0"
    implementation "com.android.support.constraint:constraint-layout:2.0.4"
    implementation "com.squareup.okhttp:okhttp:2.7.5"
    implementation "com.squareup.okhttp3:okhttp:3.10.0"
    implementation 'com.dropbox.core:dropbox-core-sdk:5.2.0'
    implementation files('libs/poi-3.15.jar')
}


android {
    namespace 'fr.ralala.worktime'
    compileSdk 34

    defaultConfig {
        applicationId "fr.ralala.worktime"
        minSdk 31
        targetSdk 34
        versionCode 215
        versionName "2.15"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    signingConfigs {
        config {
            keyAlias 'MyAndroidKey'
            keyPassword 'myKeyPassword'
            storeFile file('android.jks')
            storePassword 'myStorePassword'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            // to debug ProGuard rules
            minifyEnabled false
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        compose true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }
}

// versionCode <-> versionName /////////////////////////////////////////////////////////////////////
// I got the idea (code) below from the repository https://github.com/sal0max/currencie
/**
 * Checks if versionCode and versionName match.
 * Needed because of F-Droid: both have to be hard-coded and can't be assigned dynamically.
 * So at least check during build for them to match.
 */
tasks.register('checkVersion') {
    int versionCode = android.defaultConfig.versionCode
    String versionName = android.defaultConfig.versionName
    int correctVersionCode = generateVersionCode(versionName)
    if (versionCode != correctVersionCode)
        throw new GradleException(
          "versionCode and versionName don't match: " +
            "versionCode should be $correctVersionCode. Is $versionCode."
        )
}
assemble.dependsOn checkVersion
/**
 * Generates a versionCode based on the given semVer String.
 * See e.g. https://proandroiddev.com/keep-salinity-with-your-versioncode-db2089b640b9
 *
 * @param semVer e.g. 1.27
 * @return e.g. 127 (-> 1 27)
 */
private static int generateVersionCode(String semVer) {
    return semVer.split('\\.')
      .collect { Integer.parseInt(it) }
      .inject { sum, value -> sum * 100 + value }
}